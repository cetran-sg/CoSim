{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"getting_started/architecture/","title":"CoSIM Architecture","text":"<p>test test</p>"},{"location":"getting_started/architecture/#manager","title":"Manager","text":"<p>an example layout</p>"},{"location":"getting_started/architecture/#third-party-software","title":"Third Party Software","text":"<p>link test </p>"},{"location":"getting_started/codeAPI/","title":"CoSIM API","text":"<p>Here we list the identifier of the functions/class we commented</p>"},{"location":"getting_started/codeAPI/#src.sim.main.ActorSnapshots","title":"<code>src.sim.main.ActorSnapshots()</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.main.ActorSnapshots.parseActorSnapshot","title":"<code>src.sim.main.ActorSnapshots.parseActorSnapshot(snap, obsIDList, actorList, carlamap)</code>","text":"<p>Parse the Carla snapshot to extract actors data</p> <p>Parameters:</p> <ul> <li> snap             (<code>carla.Snapshot</code>)         \u2013          <p>carla snapshot to be parsed</p> </li> <li> obsIDList         \u2013          <p>list of actors ID to be included in the output</p> </li> <li> actorList         \u2013          <p>list of Carla.actors, used to retrieve static informations</p> </li> <li> carlamap         \u2013          </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>a tuple including all the actor properties</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.actorReader","title":"<code>src.sim.main.actorReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send actor data on the bridge</p> <p>Parameters:</p> <ul> <li> CARLA_HOST             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> CARLA_PORT             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.camReader","title":"<code>src.sim.main.camReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send camera on the bridge</p> <p>Parameters:</p> <ul> <li> CARLA_HOST             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> CARLA_PORT             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.egoReader","title":"<code>src.sim.main.egoReader(CARLA_HOST, CARLA_PORT, ego_sumo_endflag)</code>","text":"<p>Manager function to send ego data on the bridge + more things TODO</p> <p>Parameters:</p> <ul> <li> CARLA_HOST             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> CARLA_PORT             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.egoWriter","title":"<code>src.sim.main.egoWriter(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to receive data from the ADS and control the ego vehicle in Carla accordingly</p> <p>Parameters:</p> <ul> <li> CARLA_HOST             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> CARLA_PORT             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.lidarReader","title":"<code>src.sim.main.lidarReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send Lidar data on the bridge</p> <p>Parameters:</p> <ul> <li> CARLA_HOST             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> CARLA_PORT             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.parseEgoSnapshot","title":"<code>src.sim.main.parseEgoSnapshot(snap, egoID, carlamap, throttle, brake, steering)</code>","text":"<p>Parse the Carla snapshot to extract ego vehicle data data</p> <p>Parameters:</p> <ul> <li> snap             (<code>carla.Snapshot</code>)         \u2013          <p>carla snapshot to be parsed</p> </li> <li> egoID         \u2013          <p>ID of the ego vehicle Carla.actor </p> </li> <li> carlamap         \u2013          </li> <li> throttle         \u2013          <p>feedback data </p> </li> <li> brake         \u2013          <p>feedback data</p> </li> <li> steering         \u2013          <p>feedback data</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>a tuple including all the ego vehicle properties</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.scenarioPlayer","title":"<code>src.sim.main.scenarioPlayer(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to control carla actors</p> <p>Parameters:</p> <ul> <li> CARLA_HOST             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> CARLA_PORT             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher(hostIP, hostPort, delay, lastMsgTime)</code>","text":"<p>         Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> hostIP             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> hostPort             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> <li> delay             (<code>float</code>)         \u2013          <p>time delay between each message</p> </li> <li> lastMsgTime             (<code>float</code>)         \u2013          <p>store th timestamp of previous message</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendActorGroundTruth","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendActorGroundTruth(dataList)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendSensorData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendSensorData(data, type)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher(hostIP, hostPort, delay, lastMsgTime)</code>","text":"<p>         Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> hostIP             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> hostPort             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> <li> delay             (<code>float</code>)         \u2013          <p>time delay between each message</p> </li> <li> lastMsgTime             (<code>float</code>)         \u2013          <p>store th timestamp of previous message</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher.sendEgoData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher.sendEgoData(dataList)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher(hostIP, hostPort, delay, lastMsgTime)</code>","text":"<p>         Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> hostIP             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> hostPort             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> <li> delay             (<code>float</code>)         \u2013          <p>time delay between each message</p> </li> <li> lastMsgTime             (<code>float</code>)         \u2013          <p>store th timestamp of previous message</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendImgData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendImgData(imgData)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendcImgData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendcImgData(cimgData)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher(hostIP, hostPort, delay, lastMsgTime)</code>","text":"<p>         Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> hostIP             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> hostPort             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> <li> delay             (<code>float</code>)         \u2013          <p>time delay between each message</p> </li> <li> lastMsgTime             (<code>float</code>)         \u2013          <p>store th timestamp of previous message</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher.sendPCData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher.sendPCData(PCData)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.ApolloBridgeClient_Subscriber","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_Subscriber(hostIP, hostPort, delay, lastMsgTime)</code>","text":"<p>         Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> hostIP             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> hostPort             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> <li> delay             (<code>float</code>)         \u2013          <p>time delay between each message</p> </li> <li> lastMsgTime             (<code>float</code>)         \u2013          <p>store th timestamp of previous message</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.BridgeClient","title":"<code>src.sim.ApolloBridgeClient.BridgeClient(hostIP, hostPort, delay, lastMsgTime, msgString)</code>","text":"<p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> hostIP             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> hostPort             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> <li> delay             (<code>float</code>)         \u2013          <p>time delay between each message</p> </li> <li> lastMsgTime             (<code>float</code>)         \u2013          <p>store th timestamp of previous message</p> </li> <li> msgString             (<code>bstring</code>)         \u2013          <p>string ID of the client</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.BridgeClient.closeConnection","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.closeConnection()</code>","text":"<p>Close the connection to the server</p>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.BridgeClient.computeNextMsgTime","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.computeNextMsgTime(now, prevMsg, delay)</code>","text":"<p>When a message is sent, determines the timestamp of the next message and wheter to skip frames in case of excessive accumulation</p> <p>Parameters:</p> <ul> <li> now             (<code>float</code>)         \u2013          <p>current timestamp</p> </li> <li> prevMsg             (<code>float</code>)         \u2013          <p>expected time of the previous msg</p> </li> <li> delay             (<code>float</code>)         \u2013          <p>the expected delay of this message stream</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.BridgeClient.connectToServer","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.connectToServer()</code>","text":"<p>Initiate connection</p>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.BridgeClient.decodeSimData","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.decodeSimData(binMsg)</code>","text":"<p>Decodes and return the message received from the server, to be customized based on the client role.</p>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.BridgeClient.recvMsg","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.recvMsg()</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.BridgeClient.recvSimData","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.recvSimData()</code>","text":"<p>Function to receive messages from the server</p> <p>Returns:</p> <ul> <li>         \u2013          <p>The message from the server, decoded with self.decodeSimData</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.BridgeClient.recvall","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.recvall(count)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.BridgeClient.register","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.register()</code>","text":"<p>Register a client object to the server</p>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient.BridgeClient.sendBinMsg","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.sendBinMsg(data)</code>","text":"<p>Netstruct protocol function to send packaged data as binary</p> <p>Parameters:</p> <ul> <li> data         \u2013          </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.currentTime","title":"<code>src.sim.ApolloBridgeClient_Parser.currentTime = time.time()</code>  <code>module-attribute</code>","text":"<p>The Carla and Apollo maps are generated from Mathworks RoadRunner. Carla coordinate system is the same as the exported map coordinates except with -y Apollo map has a very large offset which is mentioned below and is applied to the localization messages</p>"},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.ConvertPoints","title":"<code>src.sim.ApolloBridgeClient_Parser.ConvertPoints(p, t)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_BPmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_BPmsgs(lat, lon, utmx, utmy, t, seq)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_Chamsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Chamsgs(t, lat, lon, utmx, utmy, odo, heading, vel, throttle, brake, steering)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_CompressedIMG","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_CompressedIMG(imgData, j)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_GPSmsg","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_GPSmsg(lat, lon, utmx, utmy, qw, qx, qy, qz, velx, vely, heading, t, seq)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_Heamsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Heamsgs(t, seq, heading)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_IMG","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_IMG(imgData, j)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_IMUmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_IMUmsgs(avelX, avelY, avelZ, accX, accY, accZ, t, seq)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_INSmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_INSmsgs(t, seq)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_PC","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_PC(sampleData, j)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_POmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_POmsgs(objCount, objIDs, objType, objHeadings, objLats, objLons, objutmx, objutmy, objVelXs, objVelYs, objBBxs, objBBys, objBBzs, t, seq)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_Posemsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Posemsgs(lat, lon, utmx, utmy, qw, qx, qy, qz, velx, vely, heading, avelX, avelY, avelZ, accX, accY, accZ, t, seq)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_Tfmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Tfmsgs(utmx, utmy, eulx, euly, eulz, t, seq)</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.ApolloBridgeClient_Parser.encode_corrIMUmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_corrIMUmsgs(avelX, avelY, avelZ, eulX, eulY, eulZ, accX, accY, accZ, heading, t)</code>","text":""}]}