{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CoSim Documentation","text":"<p> A screenshot from Carla running as part of the CoSIM framework</p>"},{"location":"#introduction","title":"Introduction","text":"<p>CoSim stands for CETRAN open-source Simulation framework. The framework is modular with different tools performing distinct tasks and the framework is able to achieve full system-level software-in-the-loop simulation testing of an autonomous vehicle (AV).</p> <p>The co-simulation architecture incorporates the following elements:</p> <ol> <li>A highly customizable and modular simulation framework built on top of the open-source Carla simulator.</li> <li>A reference ADS bridge to Baidu Apollo from the Carla simulation framework. The bridge is highly parallelized with multiprocessing-based Carla clients and communicates over a custom low overhead TCP messaging protocol developed by CETRAN.</li> <li>Various custom-developed tools and scripts used to facilitate interconnection between disparate aspects of the simulation framework.</li> </ol> <p>This simulation framework and its reference implementation, as described here, consists of open-source tools and components. However, the same general architecture can be used and supplanted with any commercial or custom/proprietary tools as needed.</p> <p>The framework is able to output sensor data and incorporate realistic and randomized road traffic and pedestrian interactions along with the capability to script complex scenarios which can be used to challenge the various subsystems of an AV.</p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml                              # The configuration file.\ndocs/\n    index.md                            # The documentation homepage.\n    ...                                 # Other markdown pages, images and other files.\nsrc/\n    ads/\n        apolloBridgeServer.py           # The main server-side script for the Apollo bridge. Run inside Apollo Docker.\n        cyberReader.py                  # Module to read control commands from Apollo CyberRT.\n        cyberWriter.py                  # Module to write simulation messages into Apollo CyberRT.\n    sim/\n        modules/                        # Directory containing protobuf modules for Apollo messages\n        agents/                         # Directory containing some Carla Python API modules for scenario generation and execution\n        cosimManager.py                 # The main script for the CoSim framework.\n        bridgeClient.py                 # The main client-side classes for the Apollo bridge.\n        apolloEncode.py                 # Methods to encode and decode ProtoBuf messages as required by Apollo.\n        sensorManager.py                # Module to define ego vehicle sensors and placement\n        scenarioManager.py              # Module to spawn actors and make them execute scenarios using the Carla Python API\n        config.py                       # File containing general configuration parameters.\n        sensorConfig.py                 # File containing configuration parameters pertaining to the sensor setup of the ego vehicle.\n</code></pre> <p>To get started, take a look at the general architecture of the CoSim framework in the next section.</p>"},{"location":"cosim_framework/bridgeClient/","title":"Bridge Client","text":"<p>The bridge client gets information about the simulation world, actors and the ego vehicle from the Carla simulation server. It also receives the control commands as supplied by the ADS (Automated Driving System) and applies it to the simulated ego vehicle.</p> <p>The bridge client consists of two files, bridgeClient.py and apolloEncode.py. The former handles communication with the bridge server and the latter handles encoding of messages into formats compatible with the Baidu Apollo ADS.</p>"},{"location":"cosim_framework/bridgeClient/#bridgeclientpy","title":"bridgeClient.py","text":""},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_ActorGTPublisher","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_ActorGTPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ADS host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ADS host (server)</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_ActorGTPublisher.sendActorGroundTruth","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_ActorGTPublisher.sendActorGroundTruth(dataList)</code>","text":"<p>Function to send actor ground truth data from the simulator </p> <p>Parameters:</p> <ul> <li> <code>dataList</code>             (<code>tuple</code>)         \u2013          <p>Contains all parameters regarding actors in the simulation frame</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_ActorGTPublisher.sendSensorData","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_ActorGTPublisher.sendSensorData(data, type)</code>","text":"<p>Wrapper function to send sensor data using the netstruct protocol</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>bytestring</code>)         \u2013          <p>Sensor data as a bytestring</p> </li> <li> <code>type</code>             (<code>string</code>)         \u2013          <p>String specifying type of sensor data</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_EgoPublisher","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_EgoPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ADS host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ADS host (server)</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_EgoPublisher.sendEgoData","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_EgoPublisher.sendEgoData(dataList)</code>","text":"<p>Function to send ego vehicle localization and other data to the ADS. Some of the localization messages are not sent, as specified by the 'enableLocMsgs' flag. This is because Apollo does not need all the localization messages to drive.</p> <p>Parameters:</p> <ul> <li> <code>dataList</code>             (<code>tuple</code>)         \u2013          <p>Contains all parameters regarding the ego in the simulation frame</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_ImgPublisher","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_ImgPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_ImgPublisher.sendImgData","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_ImgPublisher.sendImgData(imgData)</code>","text":"<p>Function to send image data from simulator to ADS</p> <p>Parameters:</p> <ul> <li> <code>imgData</code>         \u2013          <p>Image data from the simulator</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_ImgPublisher.sendcImgData","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_ImgPublisher.sendcImgData(cimgData)</code>","text":"<p>Function to send compressed image data from simulator to ADS</p> <p>Parameters:</p> <ul> <li> <code>cimgData</code>         \u2013          <p>Compressed image data from the simulator</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_PCPublisher","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_PCPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_PCPublisher.sendPCData","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_PCPublisher.sendPCData(PCData)</code>","text":"<p>Function to send pointcloud data from simulator to ADS</p> <p>Parameters:</p> <ul> <li> <code>cimgData</code>         \u2013          <p>Compressed image data from the simulator</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_Subscriber","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_Subscriber(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.ApolloBridgeClient_Subscriber.decodeSimData","title":"<code>src.sim.bridgeClient.ApolloBridgeClient_Subscriber.decodeSimData(binMsg)</code>","text":"<p>Function to decode the control command data received from the ADS</p> <p>Parameters:</p> <ul> <li> <code>binMsg</code>             (<code>bytestring</code>)         \u2013          <p>Binary message from the ADS to be decoded</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.BridgeClient","title":"<code>src.sim.bridgeClient.BridgeClient(hostIP, hostPort, msgString, delay=None, nextMsgTime=None)</code>","text":"<p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> <li> <code>msgString</code>             (<code>bstring</code>)         \u2013          <p>string ID of the client</p> </li> <li> <code>delay</code>             (<code>float</code>, default:                 <code>None</code> )         \u2013          <p>time delay between each message</p> </li> <li> <code>nextMsgTime</code>             (<code>float</code>, default:                 <code>None</code> )         \u2013          <p>store the expected timestamp of the next message</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.BridgeClient.closeConnection","title":"<code>src.sim.bridgeClient.BridgeClient.closeConnection()</code>","text":"<p>Close the connection to the server</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.BridgeClient.computeNextMsgTime","title":"<code>src.sim.bridgeClient.BridgeClient.computeNextMsgTime(now, prevMsg, delay)</code>","text":"<p>When a message is sent, determines the timestamp of the next message and wheter to skip frames in case of excessive accumulation</p> <p>Parameters:</p> <ul> <li> <code>now</code>             (<code>float</code>)         \u2013          <p>Current timestamp</p> </li> <li> <code>prevMsg</code>             (<code>float</code>)         \u2013          <p>Expected time of the previous message</p> </li> <li> <code>delay</code>             (<code>float</code>)         \u2013          <p>Expected delay of this message stream</p> </li> </ul> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.BridgeClient.connectToServer","title":"<code>src.sim.bridgeClient.BridgeClient.connectToServer()</code>","text":"<p>Initiate connection</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.BridgeClient.decodeSimData","title":"<code>src.sim.bridgeClient.BridgeClient.decodeSimData(binMsg)</code>","text":"<p>Decodes and return the message received from the server, to be customized based on the client role.</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.BridgeClient.recvMsg","title":"<code>src.sim.bridgeClient.BridgeClient.recvMsg()</code>","text":"<p>Netstruct function to receive message from apolloBridgeServer</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.BridgeClient.recvSimData","title":"<code>src.sim.bridgeClient.BridgeClient.recvSimData()</code>","text":"<p>Function to receive messages from the server</p> <p>Returns:</p> <ul> <li>         \u2013          <p>The message from the server, decoded with self.decodeSimData</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.BridgeClient.register","title":"<code>src.sim.bridgeClient.BridgeClient.register()</code>","text":"<p>Register a client object to the server</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.bridgeClient.BridgeClient.sendBinMsg","title":"<code>src.sim.bridgeClient.BridgeClient.sendBinMsg(data, msgType)</code>","text":"<p>Netstruct protocol function to package and send binary data</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>bytestring</code>)         \u2013          <p>The data to send</p> </li> <li> <code>msgType</code>             (<code>string</code>)         \u2013          <p>Message type</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#apolloencodepy","title":"apolloEncode.py","text":""},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.ConvertPoints","title":"<code>src.sim.apolloEncode.ConvertPoints(carlaPoint, t)</code>","text":"<p>Convert Carla points from the pointcloud to the Protobuf PointXYZIT format</p> <p>Parameters:</p> <ul> <li> <code>carlaPoint</code>         \u2013          <p>Point from each Carla pointcloud frame</p> </li> <li> <code>t</code>             (<code>float</code>)         \u2013          <p>Timestamp</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>Point in the PointXYZIT format</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_BPmsgs","title":"<code>src.sim.apolloEncode.encode_BPmsgs(lat, lon, utmx, utmy, t, seq)</code>","text":"<p>Package and serialize ego vehicle Best Pose data from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>lat</code>             (<code>float</code>)         \u2013          <p>Latitude</p> </li> <li> <code>lon</code>             (<code>float</code>)         \u2013          <p>Longitude</p> </li> <li> <code>utmx</code>             (<code>float</code>)         \u2013          <p>UTM X-coordinate</p> </li> <li> <code>utmy</code>             (<code>float</code>)         \u2013          <p>UTM Y-coordinate</p> </li> <li> <code>t</code>             (<code>float</code>)         \u2013          <p>Timestamp</p> </li> <li> <code>seq</code>             (<code>int</code>)         \u2013          <p>Sequence number</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>Best Pose message as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_Chamsgs","title":"<code>src.sim.apolloEncode.encode_Chamsgs(t, lat, lon, utmx, utmy, odo, heading, vel, throttle, brake, steering)</code>","text":"<p>Package and serialize ego vehicle chassis data from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>t</code>             (<code>float</code>)         \u2013          <p>Timestamp</p> </li> <li> <code>lat</code>             (<code>float</code>)         \u2013          <p>Latitude</p> </li> <li> <code>lon</code>             (<code>float</code>)         \u2013          <p>Longitude</p> </li> <li> <code>utmx</code>             (<code>float</code>)         \u2013          <p>UTM X-coordinate</p> </li> <li> <code>utmy</code>             (<code>float</code>)         \u2013          <p>UTM Y-coordinate</p> </li> <li> <code>odo</code>             (<code>float</code>)         \u2013          <p>Odometer reading</p> </li> <li> <code>heading</code>             (<code>float</code>)         \u2013          <p>Heading</p> </li> <li> <code>vel</code>             (<code>float</code>)         \u2013          <p>Absolute velocity</p> </li> <li> <code>throttle</code>             (<code>float</code>)         \u2013          <p>Throttle percentage</p> </li> <li> <code>brake</code>             (<code>float</code>)         \u2013          <p>Brake percentage</p> </li> <li> <code>steering</code>             (<code>float</code>)         \u2013          <p>Steering angle</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>Chassis message as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_CompressedIMG","title":"<code>src.sim.apolloEncode.encode_CompressedIMG(imgData, seq)</code>","text":"<p>Package and serialize compressed camera images from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>imgData</code>         \u2013          <p>Image data from the simulator</p> </li> <li> <code>seq</code>             (<code>int</code>)         \u2013          <p>Sequence number</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>Compressed image data as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_GPSmsg","title":"<code>src.sim.apolloEncode.encode_GPSmsg(lat, lon, utmx, utmy, qw, qx, qy, qz, velx, vely, heading, t, seq)</code>","text":"<p>Package and serialize ego vehicle GPS data from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>lat</code>             (<code>float</code>)         \u2013          <p>Latitude</p> </li> <li> <code>lon</code>             (<code>float</code>)         \u2013          <p>Longitude</p> </li> <li> <code>utmx</code>             (<code>float</code>)         \u2013          <p>UTM X-coordinate</p> </li> <li> <code>utmy</code>             (<code>float</code>)         \u2013          <p>UTM Y-coordinate</p> </li> <li> <code>qw</code>             (<code>float</code>)         \u2013          <p>Quaternion W</p> </li> <li> <code>qx</code>             (<code>float</code>)         \u2013          <p>Quaternion X</p> </li> <li> <code>qy</code>             (<code>float</code>)         \u2013          <p>Quaternion Y</p> </li> <li> <code>qz</code>             (<code>float</code>)         \u2013          <p>Quaternion Z</p> </li> <li> <code>velx</code>             (<code>float</code>)         \u2013          <p>Velocity in X-axis</p> </li> <li> <code>vely</code>             (<code>float</code>)         \u2013          <p>Velocity in Y-axis</p> </li> <li> <code>heading</code>             (<code>float</code>)         \u2013          <p>Heading</p> </li> <li> <code>t</code>             (<code>float</code>)         \u2013          <p>Timestamp</p> </li> <li> <code>seq</code>             (<code>int</code>)         \u2013          <p>Sequence number</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>GPS message as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_Heamsgs","title":"<code>src.sim.apolloEncode.encode_Heamsgs(t, seq, heading)</code>","text":"<p>Package and serialize ego vehicle heading from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>t</code>             (<code>float</code>)         \u2013          <p>Timestamp</p> </li> <li> <code>seq</code>             (<code>int</code>)         \u2013          <p>Sequence number</p> </li> <li> <code>heading</code>             (<code>float</code>)         \u2013          <p>Heading</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>Heading message as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_IMG","title":"<code>src.sim.apolloEncode.encode_IMG(imgData, seq)</code>","text":"<p>Package and serialize camera images from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>imgData</code>         \u2013          <p>Image data from the simulator</p> </li> <li> <code>seq</code>             (<code>int</code>)         \u2013          <p>Sequence number</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>Image data as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_IMUmsgs","title":"<code>src.sim.apolloEncode.encode_IMUmsgs(avelX, avelY, avelZ, accX, accY, accZ, t, seq)</code>","text":"<p>Package and serialize ego vehicle IMU data from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>avelX</code>             (<code>float</code>)         \u2013          <p>Angular velocity in the X-axis</p> </li> <li> <code>avelY</code>             (<code>float</code>)         \u2013          <p>Angular velocity in the Y-axis</p> </li> <li> <code>avelZ</code>             (<code>float</code>)         \u2013          <p>Angular velocity in the Z-axis</p> </li> <li> <code>accX</code>             (<code>float</code>)         \u2013          <p>Acceleration in the X-axis</p> </li> <li> <code>accY</code>             (<code>float</code>)         \u2013          <p>Acceleration in the Y-axis</p> </li> <li> <code>accZ</code>             (<code>float</code>)         \u2013          <p>Acceleration in the Z-axis</p> </li> <li> <code>t</code>             (<code>float</code>)         \u2013          <p>Timestamp</p> </li> <li> <code>seq</code>             (<code>int</code>)         \u2013          <p>Sequence number</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>IMU message as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_INSmsgs","title":"<code>src.sim.apolloEncode.encode_INSmsgs(t, seq)</code>","text":"<p>Package and serialize ego vehicle INS data from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>t</code>             (<code>float</code>)         \u2013          <p>Timestamp</p> </li> <li> <code>seq</code>             (<code>int</code>)         \u2013          <p>Sequence number</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>INS message as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_PC","title":"<code>src.sim.apolloEncode.encode_PC(pcData, seq)</code>","text":"<p>Package and serialize LiDAR pointcloud from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>pcData</code>         \u2013          <p>Pointcloud data from the simulator</p> </li> <li> <code>seq</code>             (<code>int</code>)         \u2013          <p>Sequence number</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>Pointcloud message as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_POmsgs","title":"<code>src.sim.apolloEncode.encode_POmsgs(objCount, objIDs, objType, objHeadings, objLats, objLons, objutmx, objutmy, objVelXs, objVelYs, objBBxs, objBBys, objBBzs, t, seq)</code>","text":"<p>Package and serialize actor snapshot data from the simulator into Apollo's Perception Obstacle message</p> <p>Parameters:</p> <ul> <li> <code>objCount</code>             (<code>int</code>)         \u2013          <p>Number of objects/obstacles in current simulation snapshot</p> </li> <li> <code>objIDs</code>             (<code>list</code>)         \u2013          <p>Unique identifier assigned to each object/obstacle</p> </li> <li> <code>objType</code>             (<code>string</code>)         \u2013          <p>Type of object (vehicle, pedestrian, cones etc.)</p> </li> <li> <code>objHeadings</code>             (<code>float</code>)         \u2013          <p>Heading of each object</p> </li> <li> <code>objLats</code>             (<code>float</code>)         \u2013          <p>Latitude of each object</p> </li> <li> <code>objLons</code>             (<code>float</code>)         \u2013          <p>Longitude of each object</p> </li> <li> <code>objutmx</code>             (<code>float</code>)         \u2013          <p>UTM X-coordinate of each object</p> </li> <li> <code>objutmy</code>             (<code>float</code>)         \u2013          <p>UTM Y-coordinate of each object</p> </li> <li> <code>objVelXs</code>             (<code>float</code>)         \u2013          <p>Velocity of each object in the X-axis</p> </li> <li> <code>objVelYs</code>             (<code>float</code>)         \u2013          <p>Velocity of each object in the Y-axis</p> </li> <li> <code>objBBxs</code>             (<code>float</code>)         \u2013          <p>Bounding box dimension of each object in the X-axis</p> </li> <li> <code>objBBys</code>             (<code>float</code>)         \u2013          <p>Bounding box dimension of each object in the Y-axis</p> </li> <li> <code>objBBzs</code>             (<code>float</code>)         \u2013          <p>Bounding box dimension of each object in the Z-axis</p> </li> <li> <code>t</code>             (<code>float</code>)         \u2013          <p>Timestamp</p> </li> <li> <code>seq</code>             (<code>int</code>)         \u2013          <p>Sequence number</p> </li> </ul> <p>Returns:     Perception Obstacles message as a bytestring</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_Posemsgs","title":"<code>src.sim.apolloEncode.encode_Posemsgs(lat, lon, utmx, utmy, qw, qx, qy, qz, velx, vely, heading, avelX, avelY, avelZ, accX, accY, accZ, t, seq)</code>","text":"<p>Package and serialize ego vehicle pose from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>lat</code>             (<code>float</code>)         \u2013          <p>Latitude</p> </li> <li> <code>lon</code>             (<code>float</code>)         \u2013          <p>Longitude</p> </li> <li> <code>utmx</code>             (<code>float</code>)         \u2013          <p>UTM X-coordinate</p> </li> <li> <code>utmy</code>             (<code>float</code>)         \u2013          <p>UTM Y-coordinate</p> </li> <li> <code>qw</code>             (<code>float</code>)         \u2013          <p>Quaternion W</p> </li> <li> <code>qx</code>             (<code>float</code>)         \u2013          <p>Quaternion X</p> </li> <li> <code>qy</code>             (<code>float</code>)         \u2013          <p>Quaternion Y</p> </li> <li> <code>qz</code>             (<code>float</code>)         \u2013          <p>Quaternion Z</p> </li> <li> <code>velx</code>             (<code>float</code>)         \u2013          <p>Velocity in X-axis</p> </li> <li> <code>vely</code>             (<code>float</code>)         \u2013          <p>Velocity in Y-axis</p> </li> <li> <code>heading</code>             (<code>float</code>)         \u2013          <p>Heading</p> </li> <li> <code>avelX</code>             (<code>float</code>)         \u2013          <p>Angular velocity in X-axis</p> </li> <li> <code>avelY</code>             (<code>float</code>)         \u2013          <p>Angular velocity in Y-axis</p> </li> <li> <code>avelZ</code>             (<code>float</code>)         \u2013          <p>Angular velocity in Z-axis</p> </li> <li> <code>accX</code>             (<code>float</code>)         \u2013          <p>Acceleration in X-axis</p> </li> <li> <code>accY</code>             (<code>float</code>)         \u2013          <p>Acceleration in Y-axis</p> </li> <li> <code>accZ</code>             (<code>float</code>)         \u2013          <p>Acceleration in Z-axis</p> </li> <li> <code>t</code>             (<code>float</code>)         \u2013          <p>Timestamp</p> </li> <li> <code>seq</code>             (<code>int</code>)         \u2013          <p>Sequence number</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>Pose message as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_Tfmsgs","title":"<code>src.sim.apolloEncode.encode_Tfmsgs(utmx, utmy, eulx, euly, eulz, t, seq)</code>","text":"<p>Package and serialize ego vehicle transform from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>utmx</code>             (<code>float</code>)         \u2013          <p>UTM X-coordinate</p> </li> <li> <code>utmy</code>             (<code>float</code>)         \u2013          <p>UTM Y-coordinate</p> </li> <li> <code>eulx</code>             (<code>float</code>)         \u2013          <p>Euler angle in the X-axis</p> </li> <li> <code>euly</code>             (<code>float</code>)         \u2013          <p>Euler angle in the Y-axis</p> </li> <li> <code>eulz</code>             (<code>float</code>)         \u2013          <p>Euler angle in the Z-axis</p> </li> <li> <code>t</code>             (<code>float</code>)         \u2013          <p>Timestamp</p> </li> <li> <code>seq</code>             (<code>int</code>)         \u2013          <p>Sequence number</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>Transform message as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.apolloEncode.encode_corrIMUmsgs","title":"<code>src.sim.apolloEncode.encode_corrIMUmsgs(avelX, avelY, avelZ, eulX, eulY, eulZ, accX, accY, accZ, heading, t)</code>","text":"<p>Package and serialize ego vehicle Corrected IMU data from the simulator to Apollo's format</p> <p>Parameters:</p> <ul> <li> <code>avelX</code>             (<code>float</code>)         \u2013          <p>Angular velocity in the X-axis</p> </li> <li> <code>avelY</code>             (<code>float</code>)         \u2013          <p>Angular velocity in the Y-axis</p> </li> <li> <code>avelZ</code>             (<code>float</code>)         \u2013          <p>Angular velocity in the Z-axis</p> </li> <li> <code>eulX</code>             (<code>float</code>)         \u2013          <p>Euler angle in the X-axis</p> </li> <li> <code>eulY</code>             (<code>float</code>)         \u2013          <p>Euler angle in the Y-axis</p> </li> <li> <code>eulZ</code>             (<code>float</code>)         \u2013          <p>Euler angle in the Z-axis</p> </li> <li> <code>accX</code>             (<code>float</code>)         \u2013          <p>Acceleration in the X-axis</p> </li> <li> <code>accY</code>             (<code>float</code>)         \u2013          <p>Acceleration in the Y-axis</p> </li> <li> <code>accZ</code>             (<code>float</code>)         \u2013          <p>Acceleration in the Z-axis</p> </li> <li> <code>heading</code>             (<code>float</code>)         \u2013          <p>Heading (yaw)</p> </li> <li> <code>t</code>             (<code>float</code>)         \u2013          <p>Timestamp</p> </li> </ul> <p>Returns:</p> <ul> <li>         \u2013          <p>Corrected IMU message as a bytestring</p> </li> </ul>"},{"location":"cosim_framework/bridgeServer/","title":"Bridge Server","text":"<p>The bridge server for the reference Carla-Apollo bridge runs inside the Baidu Apollo Docker environment.</p>"},{"location":"cosim_framework/bridgeServer/#apollobridgeserverpy","title":"apolloBridgeServer.py","text":""},{"location":"cosim_framework/bridgeServer/#src.ads.apolloBridgeServer.Server","title":"<code>src.ads.apolloBridgeServer.Server(host, port)</code>","text":"<p>Main bridge server class file with host and port definitions</p> <p>Parameters:</p> <ul> <li> <code>host</code>             (<code>string</code>)         \u2013          <p>IP of the bridge server, typically '127.0.0.1' (but if Carla is running on another machine, give an IP on the same subnet)</p> </li> <li> <code>port</code>             (<code>int</code>)         \u2013          <p>Port of the bridge server, typically 9999</p> </li> </ul>"},{"location":"cosim_framework/bridgeServer/#src.ads.apolloBridgeServer.Server.start","title":"<code>src.ads.apolloBridgeServer.Server.start()</code>","text":"<p>Start the server, accept connections from clients and assign them to handlers (each on a different process)</p>"},{"location":"cosim_framework/bridgeServer/#src.ads.apolloBridgeServer.ccHandler","title":"<code>src.ads.apolloBridgeServer.ccHandler(server, conn, addr, prID)</code>","text":"<p>Handler for control command messages to be published to the simulator</p>"},{"location":"cosim_framework/bridgeServer/#src.ads.apolloBridgeServer.connHandler","title":"<code>src.ads.apolloBridgeServer.connHandler(server, conn, addr, prID, initmsgType)</code>","text":"<p>Connection handler for subscribed messages from the simulator</p>"},{"location":"cosim_framework/bridgeServer/#cyberwriterpy","title":"cyberWriter.py","text":""},{"location":"cosim_framework/bridgeServer/#src.ads.cyberWriter.CyberWriter","title":"<code>src.ads.cyberWriter.CyberWriter(nodeName, msgDict)</code>","text":"<p>Initialize CyberWriter object</p> <p>Parameters:</p> <ul> <li> <code>nodeName</code>             (<code>string</code>)         \u2013          <p>Name of the CyberRT node to write the message into</p> </li> <li> <code>msgDict</code>             (<code>dict</code>)         \u2013          <p>Dictionary containing the message channel and type of message</p> </li> </ul>"},{"location":"cosim_framework/bridgeServer/#src.ads.cyberWriter.CyberWriter.makeWriter","title":"<code>src.ads.cyberWriter.CyberWriter.makeWriter()</code>","text":"<p>Create a CyberRT node and create a writer to it</p>"},{"location":"cosim_framework/bridgeServer/#src.ads.cyberWriter.CyberWriter.writeMessage","title":"<code>src.ads.cyberWriter.CyberWriter.writeMessage(binMsg, msgType, msgLen)</code>","text":"<p>Write the binary message into the CyberRT node using the previously created writer</p> <p>Parameters:</p> <ul> <li> <code>binMsg</code>             (<code>bytestring</code>)         \u2013          <p>Bytestring message received from the simulator</p> </li> <li> <code>msgType</code>         \u2013          <p>Message type from the dictionary which stores all message channels and types</p> </li> <li> <code>msgLen</code>             (<code>int</code>)         \u2013          <p>Length of the message</p> </li> </ul>"},{"location":"cosim_framework/bridgeServer/#cyberreaderpy","title":"cyberReader.py","text":""},{"location":"cosim_framework/bridgeServer/#src.ads.cyberReader.cReader","title":"<code>src.ads.cyberReader.cReader()</code>","text":"<p>Initialize CyberReader object</p>"},{"location":"cosim_framework/bridgeServer/#src.ads.cyberReader.cReader.callback","title":"<code>src.ads.cyberReader.cReader.callback(data)</code>","text":"<p>Callback function to get control command messages from CyberRT</p>"},{"location":"cosim_framework/bridgeServer/#src.ads.cyberReader.cReader.encodeBinMsg","title":"<code>src.ads.cyberReader.cReader.encodeBinMsg(msg)</code>","text":"<p>Function to encode the control commands to binary for sending to the simulator</p> <p>Parameters:</p> <ul> <li> <code>msg</code>         \u2013          <p>Control command message</p> </li> </ul>"},{"location":"cosim_framework/bridgeServer/#src.ads.cyberReader.cReader.makeReader","title":"<code>src.ads.cyberReader.cReader.makeReader()</code>","text":"<p>Function to create a CyberRT reader and assign the previously defined callback function to it</p>"},{"location":"cosim_framework/bridgeServer/#src.ads.cyberReader.cReader.readMsgList","title":"<code>src.ads.cyberReader.cReader.readMsgList(clearFlag=True)</code>","text":"<p>Thread locked function to read the control commands and control command list before sending to the simulator</p> <p>Parameters:</p> <ul> <li> <code>clearFlag</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Flag to indicate if the backlog of contol commands have been cleared or not</p> </li> </ul>"},{"location":"cosim_framework/cosimManager/","title":"CoSIM Manager","text":"<p>The CoSim Manager is responsible for managing the simulation, calling the various client scripts, passing them data and starting and stopping scenarios.</p> <p></p> <p>A high-level architecture is shown here.</p> <p>Here we list the identifier of the functions/class we commented</p>"},{"location":"cosim_framework/cosimManager/#cosimmanagerpy","title":"cosimManager.py","text":""},{"location":"cosim_framework/cosimManager/#src.sim.cosimManager.ActorSnapshots","title":"<code>src.sim.cosimManager.ActorSnapshots()</code>","text":""},{"location":"cosim_framework/cosimManager/#src.sim.cosimManager.ActorSnapshots.parseActorSnapshot","title":"<code>src.sim.cosimManager.ActorSnapshots.parseActorSnapshot(snap, obsIDList, actorList, carlamap)</code>","text":"<p>Parse the Carla snapshot to extract actor data. This is subsequently used to generate the actor ground truth message for the ADS.</p> <p>Parameters:</p> <ul> <li> <code>snap</code>             (<code>Snapshot</code>)         \u2013          <p>Carla snapshot to be parsed</p> </li> <li> <code>obsIDList</code>         \u2013          <p>List of actor IDs to be included in the output</p> </li> <li> <code>actorList</code>         \u2013          <p>List of carla.actors used to retrieve static information</p> </li> <li> <code>carlamap</code>         \u2013          <p>Carla world.map object used to get properties such as those for geolocation transformation</p> </li> </ul> <p>Returns:     A tuple including all actor properties for each actor</p>"},{"location":"cosim_framework/cosimManager/#src.sim.cosimManager.actorReader","title":"<code>src.sim.cosimManager.actorReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send actor data using the bridge</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>Host IP of Carla server</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>Port of Carla server</p> </li> </ul>"},{"location":"cosim_framework/cosimManager/#src.sim.cosimManager.camReader","title":"<code>src.sim.cosimManager.camReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send camera on the bridge</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>Host IP of Carla server</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>Port of Carla server</p> </li> </ul>"},{"location":"cosim_framework/cosimManager/#src.sim.cosimManager.egoReader","title":"<code>src.sim.cosimManager.egoReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send ego data on the bridge + more things TODO</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>Host IP of Carla server</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>Port of Carla server</p> </li> </ul>"},{"location":"cosim_framework/cosimManager/#src.sim.cosimManager.egoWriter","title":"<code>src.sim.cosimManager.egoWriter(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to receive data from the ADS and control the ego vehicle in Carla accordingly</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>Host IP of Carla server</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>Port of Carla server</p> </li> </ul>"},{"location":"cosim_framework/cosimManager/#src.sim.cosimManager.lidarReader","title":"<code>src.sim.cosimManager.lidarReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send Lidar data on the bridge</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>Host IP of Carla server</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>Port of Carla server</p> </li> </ul>"},{"location":"cosim_framework/cosimManager/#src.sim.cosimManager.parseEgoSnapshot","title":"<code>src.sim.cosimManager.parseEgoSnapshot(snap, egoID, carlamap, throttle, brake, steering)</code>","text":"<p>Parse the Carla snapshot to extract ego vehicle data</p> <p>Parameters:</p> <ul> <li> <code>snap</code>             (<code>Snapshot</code>)         \u2013          <p>Carla snapshot to be parsed</p> </li> <li> <code>egoID</code>         \u2013          <p>ID of the ego vehicle which is a carla.actor </p> </li> <li> <code>carlamap</code>         \u2013          <p>Carla world.map object used to get properties such as those for geolocation transformation</p> </li> <li> <code>throttle</code>         \u2013          <p>Throttle value taken from the ADS to be fed back in the ego state message</p> </li> <li> <code>brake</code>         \u2013          <p>Brake value taken from the ADS to be fed back in the ego state message</p> </li> <li> <code>steering</code>         \u2013          <p>Steering value taken from the ADS to be fed back in the ego state message</p> </li> </ul> <p>Returns:     A tuple including all properties pertaining to the ego vehicle state</p>"},{"location":"cosim_framework/cosimManager/#src.sim.cosimManager.scenarioPlayer","title":"<code>src.sim.cosimManager.scenarioPlayer(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to control carla actors</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>Host IP of Carla server</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>Port of Carla server</p> </li> </ul>"},{"location":"cosim_framework/prerequisites/","title":"Prerequisites","text":""},{"location":"cosim_framework/prerequisites/#software-requirements","title":"Software requirements","text":"<p>Before trying out the CoSim framework yourself, ensure that the following software packages are installed.</p>"},{"location":"cosim_framework/prerequisites/#simulation-machine","title":"Simulation machine","text":"<ul> <li>Operating system: Windows 10/11 or Ubuntu 20.04</li> <li>Python 3.8.10</li> <li>NumPy</li> <li>opencv-python</li> <li>pandas</li> <li>transforms3d</li> <li>Netstruct</li> <li>protobuf 3.14</li> </ul>"},{"location":"cosim_framework/prerequisites/#ads-machine","title":"ADS machine","text":"<ul> <li>Operating system: Ubuntu 20.04</li> <li>Apollo 8.0<ul> <li>Install prerequisites for Apollo as described here</li> <li>Install Apollo as described here</li> </ul> </li> <li>Python 3.8.10</li> <li>netstruct</li> </ul>"},{"location":"cosim_framework/prerequisites/#apollo-flag-configuration-to-enable-planning-module-with-carla-bridge","title":"Apollo flag configuration to enable planning module with Carla bridge","text":"<p>On the Apollo machine, set the <code>enable_map_reference_unify</code> flag as 'false' in <code>apollo/modules/common/configs/config_gflags.cc</code></p> <p>Once set as 'false', it should look like this:</p> <p><code>DEFINE_bool(enable_map_reference_unify, false,             \"enable IMU data convert to map reference\");</code></p> <p>Now, rebuild Apollo using <code>./apollo.sh build_opt_gpu</code>.</p>"},{"location":"cosim_framework/prerequisites/#hardware-recommendations","title":"Hardware recommendations","text":""},{"location":"cosim_framework/prerequisites/#simulation-machine_1","title":"Simulation machine","text":"<ul> <li>CPU - A modern AMD or Intel CPU with good single and multithreaded performance</li> <li>GPU - A modern AMD or Nvidia GPU supporting Vulkan and DX12</li> <li>Memory - At least 16GB</li> <li>Storage - At least 500GB</li> <li>Network - At least 1GbE</li> </ul>"},{"location":"cosim_framework/prerequisites/#ads-machine_1","title":"ADS machine","text":"<ul> <li>CPU - At least an 8-core AMD or Intel CPU with good single and multithreaded performance</li> <li>GPU - NVIDIA Turing GPU or AMD GFX9/RDNA/CDNA GPU</li> <li>Memory - At least 16GB</li> <li>Storage - At least 500GB</li> <li>Network - At least 1GbE</li> </ul>"},{"location":"getting_started/architecture/","title":"CoSIM Architecture","text":"<p>A high level architecture of the CoSIM framework is illustrated below.</p> <p></p> <p>This simulation framework and its reference implementation have mostly been built with open-source tools. However, the same general architecture can be used and supplanted with any commercial or custom/proprietary tools, as needed. The current version of the simulation framework consists of a reference bridge to the Baidu Apollo ADS. This reference bridge can serve as a good baseline to create an interface between the framework and any ADS.</p>"},{"location":"getting_started/mapCreation/","title":"Map creation workflow","text":"<p>This section describes the workflow for creating maps compliant with the CoSIM framework and its reference bridge to the Baidu Apollo ADS.</p> <p>MathWorks RoadRunner can be used for modelling and exporting the map in various formats for the CoSIM framework. RoadRunner is a versatile and easy-to-use 3D road and environment modelling tool with powerful functionalities to import and export multiple different file formats focused on vehicle and autonomous driving testing.</p> <p>RoadRunner is widely used by both industry and academia. Roads and associated infrastructure can be placed in a 3D space with relative ease using a straightforward GUI. Various aspects of the road network such as textures, lane markings, lane widths and so on can be customized as per requirements.</p> <p></p>"},{"location":"getting_started/mapCreation/#formats-required","title":"Formats required","text":"<p>Once the base map is generated on RoadRunner, it is exported to different formats as per the requirements of the individual tools in the simulation toolchain. These are as follows:</p> <ol> <li>Carla - As per the latest verion of Carla, RoadRunner exports have to be fulfilled in the Unreal Editor Datasmith format along with an OpenDRIVE file. Datasmith serves as a robust file format and workflow toolkit designed to streamline the integration of 3D data from various design and modeling applications into Unreal Engine. It intelligently converts lights and materials, preserving metadata, hierarchy, and enabling automatic updates for iterative design processes. The format facilitates photorealistic visualization within Unreal Engine, making it easy to quickly generate and update road models from RoadRunner.</li> <li>Apollo - Apollo requires the map in a specific ProtoBuf HD map format with semantic information about road features such as individual lanes. RoadRunner supports Apollo export in both plaintext and binary formats.</li> <li>SUMO - SUMO, if used for traffic simulation, requires the OpenDRIVE file to generate its own map network. Once the file is imported into SUMO, it must be post-processed to enable left-hand driving, as SUMO in its default configuration only supports right-hand driving. For more details, refer here.</li> </ol>"},{"location":"getting_started/mapCreation/#base-map","title":"Base map","text":"<p>For generating a map based on real-world locations, the first step of the workflow is to import ground-truth geospatial data. This could be in the form of GIS vector data, pointclouds or even accurately scaled drawings or map images.</p> <p>For example, we can use the Singapore Land Traffic Authority's (LTA) publicly available kerbline dataset as the ground-truth data. The kerbline data is available freely as a ShapeFile (SHP) for the entire island of Singapore on the Land Transport DataMall. Using a free GIS software such as QGIS, we can isolate the area required for the simulation map before exporting the SHP file to GPS Exchange (GPX) format or GeoJSON format which can be imported into the RoadRunner workspace.</p>"},{"location":"getting_started/mapCreation/#export","title":"Export","text":"<p>The RoadRunner map, once modelled, can be exported to various formats as is required for the simulation test framework. The maps used for the ADS and the simulator have to match.</p> <p>For the reference implentation, the map is recommended to be exported to the Unreal Datasmith format for Carla and the Baidu Apollo .bin format for the ADS. Carla coordinate system is the same as the exported map coordinates except with an inverted y-axis (as -y).</p>"},{"location":"getting_started/mapCreation/#apollo-map","title":"Apollo map","text":"<p>The Apollo map has an arbitrary offset which is specified in the <code>config.py</code> file and is applied to the localization messages.</p> <ol> <li> <p>To find this offset, create a 5m long road from (0,0) to (0,5) in RoadRunner. Export the OpenDrive (.xodr) and Apollo map (.txt, .bin) formats.</p> </li> <li> <p>From the .xodr, find the ID of the road. Find the same road ID in the Apollo .txt file and note the x and y values. These values are the offset. This offset value must be updated in the <code>config.py</code> file.</p> </li> <li> <p>After this, copy the map files into a new directory (named after your map) on the ADS machine at <code>/apollo/modules/maps/data/</code>. The file should be named <code>base_map.bin</code>.</p> </li> <li> <p><code>bazel-bin/modules/map/tools/proto_map_generator --map_dir=INPUT_DIR --output_dir=OUTPUT_DIR</code></p> </li> <li> <p><code>bazel-bin/modules/map/tools/sim_map_generator --map_dir=INPUT_DIR --output_dir=OUTPUT_DIR</code></p> </li> <li> <p><code>scripts/generate_routing_topo_graph.sh --map_dir=INPUT_DIR</code></p> </li> </ol> <p>Refer here for more details on Apollo's map requirements.</p>"},{"location":"getting_started/mapCreation/#carla-map","title":"Carla map","text":"<p>To import maps into Carla, users may follow the official guide here. This includes detailed instructions on how to use RoadRunner to create maps for Carla.</p>"}]}