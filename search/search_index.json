{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CoSIM Documentation","text":"<p>This website contains comprehensive documentation for the CoSIM framework.</p> <p> A screenshot from Carla running as part of the CoSIM framework</p>"},{"location":"#introduction","title":"Introduction","text":"<p>CoSIM stands for CETRAN open-source SIMulation framework. The framework is modular with different tools performing distinct tasks and the framework is able to achieve full system-level software-in-the-loop simulation testing of an autonomous vehicle (AV).</p> <p>The co-simulation architecture incorporates the following elements:</p> <ol> <li>A highly customizable and modular simulation and scenario framework built on top of the open-source Carla simulator.</li> <li>A reference traffic simulation implementation using the open-source SUMO microscopic traffic simulator co-simulated with Carla.</li> <li>A reference implementation of high-fidelity sensor co-simulation from Ansys AVXcelerate. A valid AVXcelerate license is required to use this functionality.</li> <li>A reference ADS bridge to Baidu Apollo from the Carla simulation framework. The bridge is highly parallelized with multiprocessing-based Carla clients and communicates over a custom low overhead TCP messaging protocol developed by CETRAN.</li> <li>A map creation workflow with Mathworks RoadRunner to build accurate maps for each of the tools in the simulation toolchain.</li> <li>And finally, various custom-developed tools and scripts used to facilitate interconnection between disparate aspects of the simulation framework.</li> </ol> <p>This simulation framework and its reference implementation, as described here, consist of open-source tools and components. However, the same general architecture can be used and supplanted with any commercial or custom/proprietary tools as needed.</p> <p>The framework is able to output sensor data and incorporate realistic and randomized road traffic and pedestrian interactions along with the capability to script complex scenarios which can be used to challenge the various subsystems of an AV.</p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\nsrc/\n    ads/\n        ApolloBridgeServer.py           # The main server-side script for the Apollo bridge. Run inside Apollo Docker.\n        cyberReader.py                  # Module to read control commands from Apollo CyberRT.\n        cyberWriter.py                  # Module to write simulation messages into Apollo CyberRT.\n    sim/\n        main.py                         # The main script for the CoSIM simulation framework.\n        ApolloBridgeClient.py           # The main client-side classes for the Apollo bridge.\n        ApolloBridgeClient_Parser.py    # Methods to encode and decode ProtoBuf messages as required by Apollo.\n</code></pre> <p>To get started, take a look at the general architecture of the CoSIM framework in the next section.</p>"},{"location":"cosim_framework/bridgeClient/","title":"Bridge Client","text":"<p>Here we list the identifier of the functions/class we commented</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendActorGroundTruth","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendActorGroundTruth(dataList)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendSensorData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendSensorData(data, type)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher.sendEgoData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher.sendEgoData(dataList)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendImgData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendImgData(imgData)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendcImgData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendcImgData(cimgData)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher.sendPCData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher.sendPCData(PCData)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_Subscriber","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_Subscriber(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient","title":"<code>src.sim.ApolloBridgeClient.BridgeClient(hostIP, hostPort, msgString, delay=None, nextMsgTime=None)</code>","text":"<p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> <li> <code>msgString</code>             (<code>bstring</code>)         \u2013          <p>string ID of the client</p> </li> <li> <code>delay</code>             (<code>float</code>, default:                 <code>None</code> )         \u2013          <p>time delay between each message</p> </li> <li> <code>nextMsgTime</code>             (<code>float</code>, default:                 <code>None</code> )         \u2013          <p>store the expected timestamp of the next message</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.closeConnection","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.closeConnection()</code>","text":"<p>Close the connection to the server</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.computeNextMsgTime","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.computeNextMsgTime(now, prevMsg, delay)</code>","text":"<p>When a message is sent, determines the timestamp of the next message and wheter to skip frames in case of excessive accumulation</p> <p>Parameters:</p> <ul> <li> <code>now</code>             (<code>float</code>)         \u2013          <p>current timestamp</p> </li> <li> <code>prevMsg</code>             (<code>float</code>)         \u2013          <p>expected time of the previous msg</p> </li> <li> <code>delay</code>             (<code>float</code>)         \u2013          <p>the expected delay of this message stream</p> </li> </ul> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.connectToServer","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.connectToServer()</code>","text":"<p>Initiate connection</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.decodeSimData","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.decodeSimData(binMsg)</code>","text":"<p>Decodes and return the message received from the server, to be customized based on the client role.</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.recvMsg","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.recvMsg()</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.recvSimData","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.recvSimData()</code>","text":"<p>Function to receive messages from the server</p> <p>Args:</p> <p>Returns:</p> <ul> <li>         \u2013          <p>The message from the server, decoded with self.decodeSimData</p> </li> </ul>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.recvall","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.recvall(count)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.register","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.register()</code>","text":"<p>Register a client object to the server</p> <p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.sendBinMsg","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.sendBinMsg(data, msgType)</code>","text":"<p>Netstruct protocol function to send packaged data as binary</p> <p>Parameters:</p> <ul> <li> <code>data</code>         \u2013          </li> </ul> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.currentTime","title":"<code>src.sim.ApolloBridgeClient_Parser.currentTime = time.time()</code>  <code>module-attribute</code>","text":"<p>The Carla and Apollo maps are generated from Mathworks RoadRunner. Carla coordinate system is the same as the exported map coordinates except with -y Apollo map has a very large offset which is mentioned below and is applied to the localization messages</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.ConvertPoints","title":"<code>src.sim.ApolloBridgeClient_Parser.ConvertPoints(p, t)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_BPmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_BPmsgs(lat, lon, utmx, utmy, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_Chamsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Chamsgs(t, lat, lon, utmx, utmy, odo, heading, vel, throttle, brake, steering)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_CompressedIMG","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_CompressedIMG(imgData, j)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_GPSmsg","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_GPSmsg(lat, lon, utmx, utmy, qw, qx, qy, qz, velx, vely, heading, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_Heamsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Heamsgs(t, seq, heading)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_IMG","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_IMG(imgData, j)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_IMUmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_IMUmsgs(avelX, avelY, avelZ, accX, accY, accZ, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_INSmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_INSmsgs(t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_PC","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_PC(sampleData, j)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_POmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_POmsgs(objCount, objIDs, objType, objHeadings, objLats, objLons, objutmx, objutmy, objVelXs, objVelYs, objBBxs, objBBys, objBBzs, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_Posemsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Posemsgs(lat, lon, utmx, utmy, qw, qx, qy, qz, velx, vely, heading, avelX, avelY, avelZ, accX, accY, accZ, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_Tfmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Tfmsgs(utmx, utmy, eulx, euly, eulz, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_corrIMUmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_corrIMUmsgs(avelX, avelY, avelZ, eulX, eulY, eulZ, accX, accY, accZ, heading, t)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"cosim_framework/bridgeServer/","title":"Bridge Server","text":"<p>Here we list the identifier of the functions/class we commented</p>"},{"location":"cosim_framework/bridgeServer/#src.ads.ApolloBridgeServer.Server","title":"<code>src.ads.ApolloBridgeServer.Server(host, port)</code>","text":"<p>Main bridge server class file with host and port definitions</p> <p>Parameters:</p> <ul> <li> <code>host</code>             (<code>string</code>)         \u2013          </li> <li> <code>port</code>             (<code>int</code>)         \u2013          </li> </ul>"},{"location":"cosim_framework/bridgeServer/#src.ads.ApolloBridgeServer.Server.start","title":"<code>src.ads.ApolloBridgeServer.Server.start()</code>","text":"<p>Start the server</p>"},{"location":"cosim_framework/bridgeServer/#src.ads.ApolloBridgeServer.ccHandler","title":"<code>src.ads.ApolloBridgeServer.ccHandler(server, conn, addr, prID)</code>","text":"<p>Handler for Control Command messages Args:     conn :     addr :     prID :</p>"},{"location":"cosim_framework/bridgeServer/#src.ads.ApolloBridgeServer.connHandler","title":"<code>src.ads.ApolloBridgeServer.connHandler(server, conn, addr, prID, initmsgType)</code>","text":"<p>Connection handler. Two will be created for each session as a publisher and subscriber (on server side)</p> <p>Parameters:</p> <ul> <li> <code>conn</code>         \u2013          </li> <li> <code>addr</code>         \u2013          </li> <li> <code>prID</code>         \u2013          </li> <li> <code>initmsgType</code>         \u2013          </li> </ul>"},{"location":"cosim_framework/codeAPI/","title":"CoSIM API","text":"<p>Here we list the identifier of the functions/class we commented</p>"},{"location":"cosim_framework/codeAPI/#src.sim.main.ActorSnapshots","title":"<code>src.sim.main.ActorSnapshots()</code>","text":""},{"location":"cosim_framework/codeAPI/#src.sim.main.ActorSnapshots.parseActorSnapshot","title":"<code>src.sim.main.ActorSnapshots.parseActorSnapshot(snap, obsIDList, actorList, carlamap)</code>","text":"<p>Parse the Carla snapshot to extract actors data</p> <p>Parameters:</p> <ul> <li> <code>snap</code>             (<code>Snapshot</code>)         \u2013          <p>carla snapshot to be parsed</p> </li> <li> <code>obsIDList</code>         \u2013          <p>list of actors ID to be included in the output</p> </li> <li> <code>actorList</code>         \u2013          <p>list of Carla.actors, used to retrieve static informations</p> </li> <li> <code>carlamap</code>         \u2013          </li> </ul> <p>Returns:     a tuple including all the actor properties</p>"},{"location":"cosim_framework/codeAPI/#src.sim.main.actorReader","title":"<code>src.sim.main.actorReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send actor data on the bridge</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"cosim_framework/codeAPI/#src.sim.main.camReader","title":"<code>src.sim.main.camReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send camera on the bridge</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"cosim_framework/codeAPI/#src.sim.main.egoReader","title":"<code>src.sim.main.egoReader(CARLA_HOST, CARLA_PORT, ego_sumo_endflag)</code>","text":"<p>Manager function to send ego data on the bridge + more things TODO</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"cosim_framework/codeAPI/#src.sim.main.egoWriter","title":"<code>src.sim.main.egoWriter(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to receive data from the ADS and control the ego vehicle in Carla accordingly</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"cosim_framework/codeAPI/#src.sim.main.lidarReader","title":"<code>src.sim.main.lidarReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send Lidar data on the bridge</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"cosim_framework/codeAPI/#src.sim.main.parseEgoSnapshot","title":"<code>src.sim.main.parseEgoSnapshot(snap, egoID, carlamap, throttle, brake, steering)</code>","text":"<p>Parse the Carla snapshot to extract ego vehicle data</p> <p>Parameters:</p> <ul> <li> <code>snap</code>             (<code>Snapshot</code>)         \u2013          <p>carla snapshot to be parsed</p> </li> <li> <code>egoID</code>         \u2013          <p>ID of the ego vehicle Carla.actor </p> </li> <li> <code>carlamap</code>         \u2013          </li> <li> <code>throttle</code>         \u2013          <p>feedback data </p> </li> <li> <code>brake</code>         \u2013          <p>feedback data</p> </li> <li> <code>steering</code>         \u2013          <p>feedback data</p> </li> </ul> <p>Returns:     a tuple including all the ego vehicle properties</p>"},{"location":"cosim_framework/codeAPI/#src.sim.main.scenarioPlayer","title":"<code>src.sim.main.scenarioPlayer(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to control carla actors</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"cosim_framework/scenarioFramework/","title":"Scenario framework","text":"<p>This section describes the scenario framework included as part of CoSIM. The scenario framework is a slightly more abstract layer on top of Carla's Python API used for manual scenario scripting.</p>"},{"location":"getting_started/architecture/","title":"CoSIM Architecture","text":"<p>A high level architecture of the CoSIM framework is illustrated below.</p> <p></p>"},{"location":"getting_started/architecture/#manager","title":"Manager","text":"<p>an example layout</p>"},{"location":"getting_started/architecture/#third-party-software","title":"Third Party Software","text":"<p>link test </p>"},{"location":"getting_started/bridgeClient/","title":"Bridge Client","text":"<p>Here we list the identifier of the functions/class we commented</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendActorGroundTruth","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendActorGroundTruth(dataList)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendSensorData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ActorGTPublisher.sendSensorData(data, type)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher.sendEgoData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_EgoPublisher.sendEgoData(dataList)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendImgData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendImgData(imgData)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendcImgData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_ImgPublisher.sendcImgData(cimgData)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher.sendPCData","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_PCPublisher.sendPCData(PCData)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.ApolloBridgeClient_Subscriber","title":"<code>src.sim.ApolloBridgeClient.ApolloBridgeClient_Subscriber(hostIP, hostPort)</code>","text":"<p>             Bases: <code>BridgeClient</code></p> <p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> </ul>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient","title":"<code>src.sim.ApolloBridgeClient.BridgeClient(hostIP, hostPort, msgString, delay=None, nextMsgTime=None)</code>","text":"<p>Generic Bridge Client</p> <p>Parameters:</p> <ul> <li> <code>hostIP</code>             (<code>string</code>)         \u2013          <p>The IP of the ads host (server)</p> </li> <li> <code>hostPort</code>             (<code>int</code>)         \u2013          <p>The port of the ads host (server)</p> </li> <li> <code>msgString</code>             (<code>bstring</code>)         \u2013          <p>string ID of the client</p> </li> <li> <code>delay</code>             (<code>float</code>, default:                 <code>None</code> )         \u2013          <p>time delay between each message</p> </li> <li> <code>nextMsgTime</code>             (<code>float</code>, default:                 <code>None</code> )         \u2013          <p>store the expected timestamp of the next message</p> </li> </ul>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.closeConnection","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.closeConnection()</code>","text":"<p>Close the connection to the server</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.computeNextMsgTime","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.computeNextMsgTime(now, prevMsg, delay)</code>","text":"<p>When a message is sent, determines the timestamp of the next message and wheter to skip frames in case of excessive accumulation</p> <p>Parameters:</p> <ul> <li> <code>now</code>             (<code>float</code>)         \u2013          <p>current timestamp</p> </li> <li> <code>prevMsg</code>             (<code>float</code>)         \u2013          <p>expected time of the previous msg</p> </li> <li> <code>delay</code>             (<code>float</code>)         \u2013          <p>the expected delay of this message stream</p> </li> </ul> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.connectToServer","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.connectToServer()</code>","text":"<p>Initiate connection</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.decodeSimData","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.decodeSimData(binMsg)</code>","text":"<p>Decodes and return the message received from the server, to be customized based on the client role.</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.recvMsg","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.recvMsg()</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.recvSimData","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.recvSimData()</code>","text":"<p>Function to receive messages from the server</p> <p>Args:</p> <p>Returns:</p> <ul> <li>         \u2013          <p>The message from the server, decoded with self.decodeSimData</p> </li> </ul>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.recvall","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.recvall(count)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.register","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.register()</code>","text":"<p>Register a client object to the server</p> <p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient.BridgeClient.sendBinMsg","title":"<code>src.sim.ApolloBridgeClient.BridgeClient.sendBinMsg(data, msgType)</code>","text":"<p>Netstruct protocol function to send packaged data as binary</p> <p>Parameters:</p> <ul> <li> <code>data</code>         \u2013          </li> </ul> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.currentTime","title":"<code>src.sim.ApolloBridgeClient_Parser.currentTime = time.time()</code>  <code>module-attribute</code>","text":"<p>The Carla and Apollo maps are generated from Mathworks RoadRunner. Carla coordinate system is the same as the exported map coordinates except with -y Apollo map has a very large offset which is mentioned below and is applied to the localization messages</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.ConvertPoints","title":"<code>src.sim.ApolloBridgeClient_Parser.ConvertPoints(p, t)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_BPmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_BPmsgs(lat, lon, utmx, utmy, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_Chamsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Chamsgs(t, lat, lon, utmx, utmy, odo, heading, vel, throttle, brake, steering)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_CompressedIMG","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_CompressedIMG(imgData, j)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_GPSmsg","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_GPSmsg(lat, lon, utmx, utmy, qw, qx, qy, qz, velx, vely, heading, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_Heamsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Heamsgs(t, seq, heading)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_IMG","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_IMG(imgData, j)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_IMUmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_IMUmsgs(avelX, avelY, avelZ, accX, accY, accZ, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_INSmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_INSmsgs(t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_PC","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_PC(sampleData, j)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_POmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_POmsgs(objCount, objIDs, objType, objHeadings, objLats, objLons, objutmx, objutmy, objVelXs, objVelYs, objBBxs, objBBys, objBBzs, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_Posemsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Posemsgs(lat, lon, utmx, utmy, qw, qx, qy, qz, velx, vely, heading, avelX, avelY, avelZ, accX, accY, accZ, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_Tfmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_Tfmsgs(utmx, utmy, eulx, euly, eulz, t, seq)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeClient/#src.sim.ApolloBridgeClient_Parser.encode_corrIMUmsgs","title":"<code>src.sim.ApolloBridgeClient_Parser.encode_corrIMUmsgs(avelX, avelY, avelZ, eulX, eulY, eulZ, accX, accY, accZ, heading, t)</code>","text":"<p>Args:</p> <p>Returns:</p>"},{"location":"getting_started/bridgeServer/","title":"Bridge Server","text":"<p>Here we list the identifier of the functions/class we commented</p>"},{"location":"getting_started/bridgeServer/#src.ads.ApolloBridgeServer.Server","title":"<code>src.ads.ApolloBridgeServer.Server(host, port)</code>","text":"<p>Main bridge server class file with host and port definitions</p> <p>Parameters:</p> <ul> <li> <code>host</code>             (<code>string</code>)         \u2013          </li> <li> <code>port</code>             (<code>int</code>)         \u2013          </li> </ul>"},{"location":"getting_started/bridgeServer/#src.ads.ApolloBridgeServer.Server.start","title":"<code>src.ads.ApolloBridgeServer.Server.start()</code>","text":"<p>Start the server</p>"},{"location":"getting_started/bridgeServer/#src.ads.ApolloBridgeServer.ccHandler","title":"<code>src.ads.ApolloBridgeServer.ccHandler(server, conn, addr, prID)</code>","text":"<p>Handler for Control Command messages Args:     conn :     addr :     prID :</p>"},{"location":"getting_started/bridgeServer/#src.ads.ApolloBridgeServer.connHandler","title":"<code>src.ads.ApolloBridgeServer.connHandler(server, conn, addr, prID, initmsgType)</code>","text":"<p>Connection handler. Two will be created for each session as a publisher and subscriber (on server side)</p> <p>Parameters:</p> <ul> <li> <code>conn</code>         \u2013          </li> <li> <code>addr</code>         \u2013          </li> <li> <code>prID</code>         \u2013          </li> <li> <code>initmsgType</code>         \u2013          </li> </ul>"},{"location":"getting_started/codeAPI/","title":"CoSIM API","text":"<p>Here we list the identifier of the functions/class we commented</p>"},{"location":"getting_started/codeAPI/#src.sim.main.ActorSnapshots","title":"<code>src.sim.main.ActorSnapshots()</code>","text":""},{"location":"getting_started/codeAPI/#src.sim.main.ActorSnapshots.parseActorSnapshot","title":"<code>src.sim.main.ActorSnapshots.parseActorSnapshot(snap, obsIDList, actorList, carlamap)</code>","text":"<p>Parse the Carla snapshot to extract actors data</p> <p>Parameters:</p> <ul> <li> <code>snap</code>             (<code>Snapshot</code>)         \u2013          <p>carla snapshot to be parsed</p> </li> <li> <code>obsIDList</code>         \u2013          <p>list of actors ID to be included in the output</p> </li> <li> <code>actorList</code>         \u2013          <p>list of Carla.actors, used to retrieve static informations</p> </li> <li> <code>carlamap</code>         \u2013          </li> </ul> <p>Returns:     a tuple including all the actor properties</p>"},{"location":"getting_started/codeAPI/#src.sim.main.actorReader","title":"<code>src.sim.main.actorReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send actor data on the bridge</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.camReader","title":"<code>src.sim.main.camReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send camera on the bridge</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.egoReader","title":"<code>src.sim.main.egoReader(CARLA_HOST, CARLA_PORT, ego_sumo_endflag)</code>","text":"<p>Manager function to send ego data on the bridge + more things TODO</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.egoWriter","title":"<code>src.sim.main.egoWriter(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to receive data from the ADS and control the ego vehicle in Carla accordingly</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.lidarReader","title":"<code>src.sim.main.lidarReader(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to send Lidar data on the bridge</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/codeAPI/#src.sim.main.parseEgoSnapshot","title":"<code>src.sim.main.parseEgoSnapshot(snap, egoID, carlamap, throttle, brake, steering)</code>","text":"<p>Parse the Carla snapshot to extract ego vehicle data</p> <p>Parameters:</p> <ul> <li> <code>snap</code>             (<code>Snapshot</code>)         \u2013          <p>carla snapshot to be parsed</p> </li> <li> <code>egoID</code>         \u2013          <p>ID of the ego vehicle Carla.actor </p> </li> <li> <code>carlamap</code>         \u2013          </li> <li> <code>throttle</code>         \u2013          <p>feedback data </p> </li> <li> <code>brake</code>         \u2013          <p>feedback data</p> </li> <li> <code>steering</code>         \u2013          <p>feedback data</p> </li> </ul> <p>Returns:     a tuple including all the ego vehicle properties</p>"},{"location":"getting_started/codeAPI/#src.sim.main.scenarioPlayer","title":"<code>src.sim.main.scenarioPlayer(CARLA_HOST, CARLA_PORT)</code>","text":"<p>Manager function to control carla actors</p> <p>Parameters:</p> <ul> <li> <code>CARLA_HOST</code>             (<code>string</code>)         \u2013          <p>IP of the simulator</p> </li> <li> <code>CARLA_PORT</code>             (<code>int</code>)         \u2013          <p>port of the simulator</p> </li> </ul>"},{"location":"getting_started/mapCreation/","title":"Map creation workflow","text":"<p>This section describes the workflow for creating maps compliant with the CoSIM framework and its reference bridge to the Baidu Apollo ADS.</p> <p>MathWorks RoadRunner can be used for modelling and exporting the map in various formats for the CoSIM framework. RoadRunner is a versatile and easy-to-use 3D road and environment modelling tool with powerful functionalities to import and export multiple different file formats focused on vehicle and autonomous driving testing.</p> <p>RoadRunner is widely used by both industry and academia. Roads and associated infrastructure can be placed in a 3D space with relative ease using a straightforward GUI. Various aspects of the road network such as textures, lane markings, lane widths and so on can be customized as per requirements.</p> <p></p>"},{"location":"getting_started/mapCreation/#formats-required","title":"Formats required","text":"<p>Once the base map is generated on RoadRunner, it is exported to different formats as per the requirements of the individual tools in the simulation toolchain. These are as follows:</p> <ol> <li>Carla - As per the latest verion of Carla, RoadRunner exports have to be fulfilled in the Unreal Editor Datasmith format along with an OpenDRIVE file. Datasmith serves as a robust file format and workflow toolkit designed to streamline the integration of 3D data from various design and modeling applications into Unreal Engine. It intelligently converts lights and materials, preserving metadata, hierarchy, and enabling automatic updates for iterative design processes. The format facilitates photorealistic visualization within Unreal Engine, making it easy to quickly generate and update road models from RoadRunner.</li> <li>Apollo - Apollo requires the map in a specific ProtoBuf HD map format with semantic information about road features such as individual lanes. RoadRunner supports Apollo export in both plaintext and binary formats.</li> <li>SUMO - SUMO, if used for traffic simulation, requires the OpenDRIVE file to generate its own map network. Once the file is imported into SUMO, it must be post-processed to enable left-hand driving, as SUMO in its default configuration only supports right-hand driving.</li> </ol>"},{"location":"getting_started/mapCreation/#base-map","title":"Base map","text":"<p>For generating a map based on real-world locations, the first step of the workflow is to import ground-truth geospatial data. This could be in the form of GIS vector data, pointclouds or even accurately scaled drawings or map images.</p> <p>For example, we can use the Singapore Land Traffic Authority's (LTA) publicly available kerbline dataset as the ground-truth data. The kerbline data is available freely as a ShapeFile (SHP) for the entire island of Singapore on the Land Transport DataMall. Using a free GIS software such as QGIS, we can isolate the area required for the simulation map before exporting the SHP file to GPS Exchange (GPX) format or GeoJSON format which can be imported into the RoadRunner workspace.</p>"},{"location":"getting_started/mapCreation/#export","title":"Export","text":"<p>The RoadRunner map, once modelled, can be exported to various formats as is required for the simulation test framework.</p>"}]}